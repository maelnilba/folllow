import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import {
  ClientSafeProvider,
  getProviders,
  LiteralUnion,
  signIn,
} from "next-auth/react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTwitter,
  faGithub,
  faGoogle,
  faDiscord,
  IconDefinition,
} from "@fortawesome/free-brands-svg-icons";
import { unstable_getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import { BuiltInProviderType } from "next-auth/providers";

const providerIcons: { [key: string]: IconDefinition } = {
  GitHub: faGithub,
  Google: faGoogle,
  Twitter: faTwitter,
  Discord: faDiscord,
};

const Index: NextPage<{
  providers: Record<
    LiteralUnion<BuiltInProviderType, string>,
    ClientSafeProvider
  > | null;
}> = ({ providers }) => {
  if (!providers) return <div>No provider found!</div>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex min-h-screen flex-col items-center justify-center">
        <div>
          <div className="text-6xl font-bold">Folllow.</div>
        </div>
        <div className="kard m-20 grid grid-cols-2 gap-4 p-10">
          {Object.values(providers).map((provider) => (
            <div key={provider.name}>
              <button
                className="btn btn-outline w-full gap-2 normal-case"
                onClick={() =>
                  signIn(provider.id, {
                    // callbackUrl: "http://localhost:3000/dashboard",
                  })
                }
              >
                <FontAwesomeIcon
                  icon={providerIcons[provider.name] || faDiscord}
                />
                Sign in with {provider.name}
              </button>
            </div>
          ))}
        </div>
      </div>
    </>
  );
};

type ServerSideProps = InferGetServerSidePropsType<typeof getServerSideProps>;
export async function getServerSideProps(context: GetServerSidePropsContext) {
  const providers = await getProviders();
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (session) {
    return {
      redirect: {
        destination: "/dashboard",
        permanent: false,
      },
    };
  }

  return {
    props: { providers },
  };
}

export default Index;
